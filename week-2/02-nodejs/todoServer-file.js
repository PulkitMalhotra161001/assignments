/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  
  
  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");

const app = express();

app.use(bodyParser.json());

// Each todo has a title and a description. The title is a string and the description is a string.
//   Each todo should also get an unique autogenerated id every time it is created
//   The expected API endpoints are defined below,

// 1.GET /todos - Retrieve all todo items
//     Description: Returns a list of all todo items.
//     Response: 200 OK with an array of todo items in JSON format.
//     Example: GET http://localhost:3000/todos
//✔️

app.get("/todos", (req, res) => {
  fs.readFile(__dirname + "/todos.json", "utf-8", (err, data) => {
    res.status(200).send(data);
  });
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123
//✔️

app.get("/todos/:id", (req, res) => {
  var id = req.params.id;

  fs.readFile(__dirname + "/todos.json", "utf-8", (err, todosStr) => {
    if (err) return console.log(err);

    let todos = JSON.parse(todosStr);
    for (let todo in todos) {
      if (todos[todo].id == id) {
        return res.status(200).send(JSON.stringify(todos[todo]));
      }
    }

    res.status(404).send();
  });
});

// 3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
// ✔️

app.post("/todos", (req, res) => {
  var data = req.body;
  var todo = {
    id: Math.floor(Math.random() * 1000000),
    title: data.title,
    // completed: data.completed,
    description: data.description,
  };

  fs.readFile(__dirname + "/todos.json", "utf-8", (err, todos) => {
    if (err) return console.log(err);
    let jsonData = JSON.parse(todos);

    jsonData.push(todo);

    fs.writeFile(__dirname + "/todos.json", JSON.stringify(jsonData), (err) => {
      if (err) return console.log(err);
      res.status(201).send(todo);
    });
  });
});

// 4. PUT /todos/:id - Update an existing todo item by ID
//     Description: Updates an existing todo item identified by its ID.
//     Request Body: JSON object representing the updated todo item.
//     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
//     Example: PUT http://localhost:3000/todos/123
//     Request Body: { "title": "Buy groceries", "completed": true }
// ✔️

app.put("/todos/:id", (req, res) => {
  var id = req.params.id;
  var newTodoData = req.body;

  fs.readFile(__dirname + "/todos.json", "utf-8", (err, todosStr) => {
    if (err) return console.log(err);
    let todos = JSON.parse(todosStr);

    let idx = -1;

    for (let todo in todos) {
      if (todos[todo].id == id) {
        idx = todo;
        break;
      }
    }

    if (idx == -1) return res.status(404).send();

    todos[idx].title = newTodoData.title;
    todos[idx].description = newTodoData.description;

    fs.writeFile(__dirname + "/todos.json", JSON.stringify(todos), (err) => {
      if (err) return console.log(err);
      return res.status(200).send(JSON.stringify(todos[idx]));
    });
  });
});

// 5. DELETE /todos/:id - Delete a todo item by ID
//     Description: Deletes a todo item identified by its ID.
//     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//     Example: DELETE http://localhost:3000/todos/123

app.delete("/todos/:id", (req, res) => {
  var id = req.params.id;

  fs.readFile(__dirname + "/todos.json", "utf-8", (err, todosStr) => {
    if (err) return console.log(err);
    let todos = JSON.parse(todosStr);
    let idx = -1;

    for (let todo in todos) {
      if (todos[todo].id == id) {
        idx = todo;
        break;
      }
    }

    if (idx == -1) return res.status(404).send("Not Found");

    todos.splice(idx, 1);

    fs.writeFile(__dirname + "/todos.json", JSON.stringify(todos), (err) => {
      if (err) return console.log(err);
      return res.status(200).send();
    });
  });
});

// - For any other route not defined in the server return 404

app.all("*", (req, res) => {
  res.status(404).send("Route not found");
});

// app.listen(3000, () => {
//   console.log("Listen to :" + 3000);
// });

module.exports = app;
